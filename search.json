[{"title":"Hexo新建文章之后自动在Typora中打开","url":"/2020/11/02/0003/","content":"\n逛大佬们博客发现的小技巧\n\n\n\n创建文件夹\n在Hexo博客根目录创建scripts文件夹\n\n\n创建脚本\n在scripts文件夹下新建一个name.js，名字随便，内容如下，注意编辑器路径要写对\n\nvar spawn = require(&#x27;child_process&#x27;).exec;hexo.on(&#x27;new&#x27;, function(data)&#123;  spawn(&#x27;start  &quot;C:\\Program Files\\Typora\\Typora.exe&quot; &#x27; + data.path);&#125;);\n\n\n","tags":["技巧","Typora","Hexo"]},{"title":"简单开箱树莓派3B+","url":"/2019/05/01/0002/","content":"\n当我2020年再来修改这文章时，看着新出的树莓派4代，我的心在滴血\n\n\n\n一堆东西\n树莓派3代B+\n\n散热片×3\n\n树莓派3代B型/3B+ 专用电源适配器 5V 2.5A\n\n树莓派3B/B+ 带风扇亚克力外壳 \n\n金士顿（Kingston）32GB TF(Micro SD) 存储卡 U1 C10\n\nbow无线键盘鼠标套装\n\nHDMI线\n\nVGA线\n\nHDMI转VGA转换器\n\n\n开箱感受\n首先是一个盒子装着树莓派主板还有集成了多种语言的说明书\n盒子那么小拿到的时候都惊到了\n然后是电源，本来以为普通的microUSB线就可以的，但看到说功率不够的话会死机，于是还要买专用电源\n无线键鼠不太好用 击键有时候没反应，敲着敲着就丢一个字母\n无线键鼠的接收器接到树莓派上（一直以为只有俩USB接口，怕不够才买了无线键鼠，结果有4个）\n装外壳的时候没看树莓派，直接乱拼亚克力板子 反正拼成长方体就行了 ，后来再多次拆卸过程中掰掉了几块QAQ，于是只好用502稍微固定了一下\n风扇红线接4号针脚，黑线接6号针脚\n有说风扇噪音大的，实测其实还可以，不靠近听的话，感觉不到的\n\n图\n因为图床出了点问题，把图全堆下边了\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Raspberry Pi","树莓派","开箱"]},{"title":"GitHub+Hexo搭建个人博客（一）","url":"/2020/10/31/0001/","content":"\n基于Windows平台，采用GitHub和Hexo搭建博客\n主要参考了这篇文章\n此篇文章结束可做出一个最初始的可浏览的Hexo博客界面\n\n\n\n\n安装Git\n打开Git官网，在Downloads页面下载合适版本即可\n安装时一路next\n安装完成后打开cmd输入git --version检查是否安装成功\nGit安装成功后就可以用Git Bash代替难用的cmd了\n\n安装Node.js\n进入Node.js官网选择长期支持版（LTS）下载并安装\n打开Git Bash输入npm -v，node -v检查是否安装成功\n\n安装Hexo并初始化\n在Git Bash里输入npm info hexo查看hexo包的信息，如果响应很慢可以考虑换淘宝npm源\n\nnpm config set registry http://registry.npm.taobao.org#换成淘宝NPM镜像 npm info hexo#检查是否成功，若成功，则会返回hexo软件包的相关信息\n\n\n按照Hexo官网的提示输入命令npm install hexo-cli -g进行安装\n安装完成后输入hexo -v检查是否安装成功\n接着按照官网提示\n\nhexo init blog#这里的blog就是你的博客所在文件夹 文件夹名字自己起#hexo会在这个文件夹生成一些博客相关的文件cd blog#进入这个新建的blog文件npm install#在blog文件夹下安装必须的插件\n\n\n初始化完成之后blog文件夹下会有一些文件\n\nnode_modules 一些依赖包\npublic 生成的网页文件\nscaffolds 文章模板\nsource 文章和页面\nthemes 主题文件\n__config.yml 配置文件\n\n\nGit Bash内输入hexo s即可启动本地服务\n\n此时在浏览器输入网址localhost:4000或者127.0.0.1:4000就可以看到网站初始的样子了\n\n\n\n创建GitHub仓库\n首先要有一个GitHub账号，没有去注册一个\n新建一个repository（仓库），命名为yourGitHubname.github.io，比如我的就是Acidwits.github.io，其他默认即可，然后点击Create repository\n这个仓库就是存放网页代码的位置\n\n生成SSH Key并添加到GitHub\n在Git Bash中，按照如下命令来\n\ngit config --global user.name yourGitHubname#后边填自己账户名，比如我就是Acidwitsgit config --global user.email youremail#后边填自己GitHub账号绑定的邮箱git config user.namegit config user.email#检查自己是否填对ssh-keygen -t rsa -C youremail#创建SSH Key，一路回车即可\n\n\n之后会告诉你在一个地方生成了.ssh文件夹，找到文件夹\n在GitHub的settings里找到SSH and GPG keys，进入并点击New SSH Key，这里是传送门\n找到.ssh文件夹下的id_rsa.pub，用记事本或者其他文本编辑器打开，把文件内容全部复制进去\n在Git Bash里敲入ssh -T git@github.com，如果配置成功，会有提示信息\n\n将Hexo生成的网页部署到GitHub\n在Git Bash下敲入npm install hexo-deployer-git --save来安装hexo-deployer-git\n\n打开blog文件夹（就是第三步init的那个文件夹），找到Hexo配置文件__config.yml，翻到最下面，照下面修改\n\n\ndeploy:  type: git  repo: https://github.com/yourGitHubname/yourGithubname.github.io.git  branch: master\n\n\n这样就可以部署了，以后每次部署只需要以下命令\n\nhexo clean#删除原先生成的网页相关文件hexo generate#再生成新的网页文件hexo deploy#部署到GitHub仓库#以上三条命令即为每次部署要用到的命令#最后两条可以简写为hexo d -g\n\n\n部署过程中可能要求输入GitHub账户名和密码，输入就行了\n部署完成之后过一会就可以在yourGitHubname.github.io看到Hexo生成的网页了\n当然是一个没经任何改动的最初始的界面，别担心，之后的教程会针对主题的配置以及其他个性化美化\n\n","tags":["Hexo","Blog","Github"]},{"title":"七牛云+PicGo搭建个人图床","url":"/2020/11/03/0004/","content":"\n七牛云免费提供的云存储空间，非常适合配合PicGo做图床\n搭配Typora写Markdown很方便\n\n\n\n配置七牛云\n注册一个七牛云账号\n\n进入控制台，添加一个对象存储\n\n\n\n\n补全相关信息\n\n\n\n创建成功，测试域名只有三十天，长期使用需要绑定自己的域名（需备案）\n\n\n域名配置\n现在自己的域名解析界面，先加一条CNAME解析记录，内容先随便填一个网站\n\n\n\n然后在七牛云控制台进行如下操作\n\n\n\n\n缓存配置默认即可\n\n\n\n之后创建即可\n\n\n\n把新添加的CNAME记录改成七牛要求的网址\n\n\n\n在七牛云控制台把自己配置的域名设置为默认域名\n\n\nPicGo配置\nPicGo是 一个用于快速上传图片并获取图片 URL 链接的工具\n在GitHub下载软件，这是链接\n傻瓜式安装之后进行空间的配置\n\n\n\n两个key可以在七牛云密钥管理查看\n\n\n\n存储空间名字就是自己新建时起的名字\n访问网址是自己绑定的那个域名\n存储区域貌似是z0-z5，可以都试试，上传成功就是配置对了，这里查到了部分不知道对不对\n\n\n\n网址后缀加上?imageslim可以在打开网页时加载压缩过的图片，提高加载速度\n存储路径即图片上传的路径，可以是根目录，也可以自己设置子目录\n配置好之后测试一下成功就可以作为图床使用了，可以自己探索一下其他设置\n快捷键Ctrl+Shift+P是上传剪贴板的图片\n\n与Typora协作\n在Typora的偏好设置里设置好就可以实现图片粘贴到Typora编辑器自动上传并在Markdown文档添加链接了\n\n\n\n到此为止，就可以舒舒服服的使用图床了\n\n总结\nPicGo是一个很好的图床工具，可以配合很多云存储搭建图床\n搭建好之后用Typora写Markdown确实方便好多\n\n","tags":["七牛云","PicGo","图床"]},{"title":"记录第一次干脆面集卡成功","url":"/2020/02/10/0007/","content":"\n两个月的吃面生活，换来了白给的一箱香爆脆\n\n\n\n先上图\n\n\n\n\n\n香嘛？\n我粗略写个程序算一下\n\n#include &lt;bits/stdc++.h&gt;using namespace std;/*常量all=16 需要收集的卡的个数p 再来一包的概率（估计在0.5~0.6）prz=1 干脆面单袋价格变量card 已经收集到的卡的集合cur 手中现有的干脆面袋数eat 吃到的干脆面袋数rmb 花的钱p1,p2 总金额，总袋数t 次数*/const int all=16,prz=1;const double p=0.5;set&lt;int&gt; card;int cur,eat,rmb;inline int get_card() &#123;//开的哪张卡\treturn rand()*rand()%16;&#125;inline bool good() &#123; //中再来一包了吗\treturn (rand()*1.0/RAND_MAX)&gt;(1-p);&#125;inline void open() &#123;\t++eat;\tif(cur&gt;0) --cur;//开一袋\telse rmb+=prz;//买一袋打开\tif(good()) ++cur;//中了再来一包 \telse card.insert(get_card());//开出来卡 \treturn;&#125;int main() &#123;\tsrand(time(NULL));//设置随机数种子\tint p1=0,p2=0,t=100000;\tfor(int i=1; i&lt;=t; ++i) &#123;\t\tcard.clear();\t\tcur=eat=rmb=0;\t\twhile(card.size()&lt;all) &#123;\t\t\topen();\t\t&#125;\t\tp1+=rmb,p2+=(eat+30);\t&#125;\tcout&lt;&lt;t&lt;&lt;&quot;次平均：&quot;&lt;&lt;endl;\tcout&lt;&lt;&quot;一袋&quot;&lt;&lt;p1*1.0/p2&lt;&lt;&quot;元&quot;&lt;&lt;endl;\tcout&lt;&lt;&quot;花了&quot;&lt;&lt;p1*1.0/t&lt;&lt;&quot;元&quot;&lt;&lt;endl;\tcout&lt;&lt;&quot;得到&quot;&lt;&lt;p2*1.0/t&lt;&lt;&quot;袋（含集卡兑换的30袋）&quot;&lt;&lt;endl;\treturn 0;&#125;\n\n\n结果如下\n\n\n\n感觉还好，四毛一袋\n就是垃圾食品吃多了确实不好\n\n其他\n对于干脆面集卡这件事有兴趣的还可以看看这两篇文章\n科学网—为了集齐小浣熊干脆面108将卡,得吃多少袋干脆面？ - 张慧铭的博文\n干脆面世纪争霸：一面功成一面枯\n\n","tags":["干脆面","白嫖"]},{"title":"我的第一个Python爬虫程序","url":"/2020/02/07/0006/","content":"\n没有什么Python基础（学不下去），就直接搜教程写的爬虫了解一下大概流程\n\n\nTalk is cheap, show me the code.\n\n\n\n# -*- coding:UTF-8 -*-import requests,sysfrom bs4 import BeautifulSoupif __name__ == &#x27;__main__&#x27;:\tserver = &#x27;https://www.biqukan.com/&#x27;\ttarget1 = &#x27;https://www.biqukan.com/2_2760/&#x27;\twebpage1 = requests.get(url = target1)\thtml_code1 = webpage1.text.encode(&#x27;iso-8859-1&#x27;)\tsoup1 = BeautifulSoup(html_code1)\tindex = soup1.find_all(&#x27;div&#x27;,class_ = &#x27;listmain&#x27;)\tsoup2 = BeautifulSoup(str(index[0]))\ta = soup2.find_all(&#x27;a&#x27;)\tcnt = 0\tfor each in a:\t\ttarget2 = server+each.get(&#x27;href&#x27;)\t\twebpage2 = requests.get(url = target2)\t\thtml_code2 = webpage2.text.encode(&#x27;iso-8859-1&#x27;)\t\tsoup3 = BeautifulSoup(html_code2)\t\ttxt = soup3.find_all(&#x27;div&#x27;,class_ = &#x27;showtxt&#x27;,id = &#x27;content&#x27;)\t\twith open(&#x27;./庆余年.txt&#x27;,&#x27;a&#x27;) as f:\t\t\tprint(&#x27;TITLE:&#x27;,each.string,&#x27;\\n&#x27;,file = f)\t\t\tprint(txt[0].text.replace(&#x27;\\xa0&#x27;*8,&#x27;\\n\\n&#x27;),&#x27;\\n&#x27;,file = f)\t\t\tcnt = cnt+1\t\t\tprint(cnt)\n\n\n这代码其实爬不出完整的小说，但是好歹有结果，体验了一波爬虫还是很值得的\n\n过程中经历了字符编码问题，有一堆报错，还有不会文件输出等等\n\nPython代码写的和C++感觉确实不一样，很好玩\n\n\n\n","tags":["Python","爬虫","代码"]},{"title":"超简单方法制作Windows To Go","url":"/2020/01/22/0008/","content":"\nWindows To Go是可以随身携带的Windows系统\n一直想搞，但是因为各种制作工具都不太行搁置了很长时间\n终于有一天我发现了Dism++可以做到\n接下来以WTG简称Windows To Go\n\n\n\n准备材料\n存储介质\n系统镜像\nDism++\n\n存储介质\n主要考虑一下容量和速度，我自己用的是32G的闪迪CZ600，这个容量装完整的win10可能有点不太够\n\n\n\n\n4K速度是很影响使用体验的，系统运行过程中要进行大量小文件的读写\n\n系统镜像\n完整版的镜像就在MSDN下载\n精简版的我一般在WINOS下载\n\nDism++\n很好用的工具\n用它来做WTG\n\n过程\n插好U盘，备份好数据，待会格式化\n打开Dism++\n\n\n\n文件-释放镜像-选择镜像位置-选择安装路径（U盘）-勾选Windwos To Go，添加引导，格式化\n\n\n\n确定两次（因为看不懂）\n等待释放完成\n\n\n\n释放完成后拔掉U盘\n重启进入BIOS，设置好从U盘启动\n\n\n\n过一会就可以进入桌面了，可能要进行一些设置\n\n\n\n进入桌面后，记得激活，装必要的驱动，查询激活状态可以在cmd中输入以下代码\n\nslmgr /xpr\n\n\n使用案例\n在某信竞辅导机构上课时，机房电脑烂的不行，老师、学生电脑疯狂蓝屏 蓝屏的钙，好喝的钙，于是有大佬上去给老师开了WTG，这还不算完，又开了VMware上Win7系统为了能用极域给大家广播（可能是Win10用不了极域吧），直接360度装x成功 虽然后来网络的配置耽误了点上课时间而且后来也没开广播讲课\n\n在机房可以用教师机（学生机USB口被禁了）上WTG然后爽，因为我学校机房都是WinXP，好多软件都不支持\n\n某次元旦晚会在班里用了WTG+WallpaperEngine来带给大家更好的视觉体验（班里本来是Win7，而且是桌面全是各种课件乱七八糟那种）\n\n\n\n\n\n大多数人可能会选择WTG在Mac上，毕竟Mac上玩游戏肯定不如Windows+Steam\n\n可以把它当PE使\n\n\n使用体验\n除第一次开机时间较长之外，SanDisk CZ600上的WTG正常开机35s左右（USB3.0），也没什么不可忍受的，换SSD+精简版系统的话应该会更快一点 要是你只有USB2.0…（比如我在学校机房）要啥自行车啊…\n\n软件开启速度也还行，长时间使用也没有明显变慢\n\nWTG+OneDrive+Git简直随时随地写代码\n\n很赞\n\n\n","tags":["Windows To Go","Dism++","Windows"]},{"title":"我的2019网易云年度听歌报告","url":"/2020/01/28/0005/","content":"\n第一次收到年度听歌报告，在这里记录一下\n19年听歌还是很多的，私人FM当BGM已经成习惯了，也算是在不断地遇见好音乐吧\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["网易云音乐","2019","年度报告"]},{"title":"DIY流光溢彩效果","url":"/2019/10/06/0009/","content":"\n某天夜里突然想玩LED灯带，看这个效果不错，打算做一个\n视频链接\n\n\n\n用到的材料\nArduino Nano开发板带USB线\nWS2812B灯带 30灯 1米\n驱动，要烧录的代码，Arduino IDE，Prismatik软件 (天翼云访问码:a1ym)\n杜邦线\n\n注意\n\n\n\n价钱应该是裸板&gt;滴胶&gt;套管\n灯带可以自己选择灯数和长度\n滴胶的做这个效果应该不错，刚好可以用背面的双面胶粘到显示器后边，我用的套管\n我是24寸显示器，贴了两侧和上边，一米的灯带还算够用\n\n配置Arduino配置\nArduino要是配置出现问题完全可以问一下店铺客服\n首先开发板连USB到电脑，安装驱动程序CH341SER.EXE\n\n\n\n安装完成后打开设备管理器，在端口中找到开发板对应的端口，要记住是COM几\n\n\nArduino IDE配置\n安装Arduino IDE\n\n在IDE的菜单-工具-开发板选择Arduino Nano，处理器选择Atmega328P-old BootLoader（我的这个板子是这样，具体可以问客服），端口选择对应的刚才记下的端口\n\n学习一下IDE的基本操作，我是看这篇文章学的\n\n总之在这步确保板子可以烧录程序，运行程序\n\n菜单-项目-加载库-管理库搜索FastLED，安装FastLED库\n\n\n开发板连接灯带\n尽量选和原先的线颜色一样的杜邦线连接板子和灯带，方便区分\n白线是地线，接到开发板的某个GND针脚\n红线是电源线，接到某个5V针脚，GND附近就有（我这里30灯，灯太多了可能带不起来要自己加电源）\n绿线是信号线，接到有PWM功能的针脚上\n\n\n将源码烧入开发板\n打开ambilight.ino，打不开可能是因为文件在中文目录下，大不了就新建一个项目把代码copy过去\n修改一下代码开头的NUM_LEDS和DATA_PIN，对应为灯带灯数和灯带信号线接的针脚序号\n烧入开发板成功就好了，会亮三下（R、G、B）\n\n// Initial RGB flashLEDS.showColor(CRGB(255, 0, 0));delay(500);LEDS.showColor(CRGB(0, 255, 0));delay(500);LEDS.showColor(CRGB(0, 0, 255));delay(500);LEDS.showColor(CRGB(0, 0, 0));\n\n\n没亮的话可以看一下线是否接好，或者尝试换一下信号线接的针脚\n\n安装配置Prismatik\n这里是官网下载界面（打开慢的话也可以用我提供的），也有其他平台哦，貌似win平台只有64位\n安装软件\n可以在安装快结束时配置，安装完成之后也可以进行流光溢彩的配置\n注意串口要对应\n灯对应的位置可以一个一个调，也可以用自带的Custom进行配置\n具体请看图\n\n\n\n\n\n\n\n\n\n\n\n\n\n最后放个视频，大功告成！\n\n","tags":["Arduino","WS2812B","流光溢彩","Prismatik"]},{"title":"VS Code配置C++环境（Win10）","url":"/2021/01/15/0012/","content":"\nDev-C++不好看\nVS太大\nVSC针不戳\n\n\n\n下载并安装VSC\n官网下载对应的版本即可\n\n\n\n安装时这些全选即可\n\n\n\n安装插件cpptools\n\n\n\n其他有必要的插件也可以安装，如主题美化、图标美化、汉化等等\n\n下载并安装MinGW\n打开下载网址\n向下翻找到这个下载\n\n\n\n解压mingw64文件夹到一个目录，这里我选择C:\\Program Files\n\n配置环境变量\n复制mingw64文件夹中bin文件夹的路径C:\\Program Files\\mingw64\\bin\n按照图示配置环境变量\n\n\n\n测试是否配置成功，打开cmd，输入gdb -v，若显示版本则为成功\n\n\n配置环境\n创建一个专门写C++代码的文件夹，在VSC中打开并新建一个cpp文件\n\n\n\n打开调试界面\n\n\n\n\n会自动生成launch.json和tasks.json，按照下边修改\n\n&#123;    // 使用 IntelliSense 了解相关属性。     // 悬停以查看现有属性的描述。    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387    &quot;version&quot;: &quot;0.2.0&quot;,    &quot;configurations&quot;: [        &#123;            &quot;name&quot;: &quot;g++.exe - 生成和调试活动文件&quot;,            &quot;type&quot;: &quot;cppdbg&quot;,            &quot;request&quot;: &quot;launch&quot;,            &quot;program&quot;: &quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,            &quot;args&quot;: [],            &quot;stopAtEntry&quot;: false,            &quot;cwd&quot;: &quot;C:\\\\Program Files\\\\mingw64\\\\bin&quot;,            &quot;environment&quot;: [],            &quot;externalConsole&quot;: true, // 修改此项为true            &quot;MIMode&quot;: &quot;gdb&quot;,            &quot;miDebuggerPath&quot;: &quot;C:\\\\Program Files\\\\mingw64\\\\bin\\\\gdb.exe&quot;,            &quot;setupCommands&quot;: [                &#123;                    &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;,                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,                    &quot;ignoreFailures&quot;: true                &#125;            ],            &quot;preLaunchTask&quot;: &quot;C/C++: g++.exe build active file&quot;        &#125;    ]&#125;\n\n&#123;    &quot;tasks&quot;: [        &#123;            &quot;type&quot;: &quot;cppbuild&quot;,            &quot;label&quot;: &quot;C/C++: g++.exe build active file&quot;,            &quot;command&quot;: &quot;C:\\\\Program Files\\\\mingw64\\\\bin\\\\g++.exe&quot;,            &quot;args&quot;: [                &quot;-g&quot;,                &quot;$&#123;file&#125;&quot;,                &quot;-o&quot;,                &quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;            ],            &quot;options&quot;: &#123;                &quot;cwd&quot;: &quot;C:\\\\Program Files\\\\mingw64\\\\bin&quot;            &#125;,            &quot;problemMatcher&quot;: [                &quot;$gcc&quot;            ],            &quot;group&quot;: &quot;build&quot;,            &quot;detail&quot;: &quot;Task generated by Debugger.&quot;        &#125;,        &#123;            &quot;type&quot;: &quot;cppbuild&quot;,            &quot;label&quot;: &quot;C/C++: g++.exe build active file ver(1)&quot;,            &quot;command&quot;: &quot;C:\\\\Program Files\\\\mingw64\\\\bin\\\\g++.exe&quot;,            &quot;args&quot;: [                &quot;-g&quot;,                &quot;$&#123;file&#125;&quot;,                &quot;-o&quot;,                &quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;            ],            &quot;options&quot;: &#123;                &quot;cwd&quot;: &quot;C:\\\\Program Files\\\\mingw64\\\\bin&quot;            &#125;,            &quot;problemMatcher&quot;: [                &quot;$gcc&quot;            ],            &quot;group&quot;: &#123;                &quot;kind&quot;: &quot;build&quot;,                &quot;isDefault&quot;: true            &#125;,            &quot;detail&quot;: &quot;Task generated by Debugger.&quot;,            &quot;presentation&quot;: &#123;                &quot;echo&quot;: true,                &quot;reveal&quot;: &quot;always&quot;,                &quot;focus&quot;: false,                &quot;panel&quot;: &quot;new&quot;,                &quot;showReuseMessage&quot;: true,                &quot;clear&quot;: false            &#125;        &#125;    ],    &quot;version&quot;: &quot;2.0.0&quot;&#125;\n\n\n之后就可以愉快的写代码了，按F5进行调试\n\n\n","tags":["VS Code","C++","环境","MinGW"]},{"title":"Game of Life——用Python实现简单的元胞自动机","url":"/2020/12/16/0010/","content":"\nPython课老师留了一个编程大作业，两周时间，要用Python实现简单的元胞自动机，瞅了一眼介绍的文档，好家伙六页doc，地铁老人看手机.jpg\n好吧，耐下性子仔细看了看发现就是个模拟，没有什么要动脑子的地方\n两小时写完代码，一个半小时都浪费在看文档了淦后来发现有同学发了介绍元胞自动机的视频，一看就懂\n\n\n\n感觉\n不好玩\n诶，有些图形挺好看的\n有意思\n\n经过\n粗略过了一遍文档，哦，原来就是个模拟\n写着写着，诶，不对，老师在文档里对每个函数有好多要求，淦，不需要这么麻烦吧\n算了，还是按老师说的来吧\n作业发布两小时后完成了第一版\n淦，两周的作业两小时做完了，那接下来干什么\n游戏？！既然是作为一个游戏，只有命令行也太磕碜了吧，加个……turtle！\n学习turtle的一些常用函数\n做出了带图形化的元胞自动机游戏\n优化游戏体验，优化用户操作逻辑，添加必要注释\n代码交给了老师\n看了混乱博物馆的视频，另一种计算机？？不能理解……\n两周之后再看程序，淦啊，写了个while(True):，这波串味了啊，没看出来就交作业了淦\n讲了OOP，那再用这作业练手一下OOP叭（摒弃了老师对函数的要求，并尽力压短了代码行数）\n\n代码\n命令行版和turtle版感觉代码不够简洁，就不贴出来了，反正很简单的东西\n\n\n\n接下来是OOP版本的元胞自动机程序代码\n用了列表推导式和三元运算符等来尽力缩短代码行数\n\n# code by Acidimport os, random, copyclass Cell(object):    &#x27;&#x27;&#x27;细胞对象&#x27;&#x27;&#x27;    def __init__(self, life_prob):        self.alive = random.random() &lt; life_prob    def __str__(self):        return (&quot;* &quot; if self.alive else &quot;  &quot;)        def __eq__(self, another):        return self.alive == another.alive    def update(self, h, w, screen, height, width):        cnt = 0        for i in range(h - 1, h + 2):            for j in range(w - 1, w + 2):                if i &gt;= 0 and i &lt; height and j &gt;= 0 and j &lt; width:                    cnt += (screen[i][j].alive if i != h or j != w else 0)        self.alive = (True if cnt == 3 else (self.alive if cnt == 2 else False))class Screen(object):    &#x27;&#x27;&#x27;生存空间对象&#x27;&#x27;&#x27;    def __init__(self, para, life_prob):        self.height, self.width = int(para[0]), int(para[1])        self.screen = [[Cell(life_prob) for i in range(self.width)] for j in range(self.height)]        def __eq__(self, another):        return self.screen == another.screen    def show(self):        os.system(&quot;cls&quot;)        for i in range(self.height):            for j in range(self.width):                print(&quot;|&quot; + str(self.screen[i][j]) if j == 0 else (str(self.screen[i][j]) + &quot;|\\n&quot; if j + 1 == self.width else self.screen[i][j]), end = &quot;&quot;)    def update(self, screen):        for i in range(self.height):            for j in range(self.width):                self.screen[i][j].update(i, j, screen, self.height, self.width)if __name__ == &quot;__main__&quot;:    screen = Screen(input(&quot;请输入行数和列数:&quot;).split(), float(input(&quot;请输入细胞生存概率：&quot;)))    screen.show()    cnt = 0    while True:        if input() == &#x27;q&#x27;:            print(&quot;退出游戏&quot;)            os._exit(0)        else:            temp_screen = copy.deepcopy(screen)            screen.update(temp_screen.screen)            if screen == temp_screen:                print(&quot;状态无更新，游戏结束&quot;)                os._exit(0)            else:                cnt += 1                screen.show()                print(&quot;第&quot;, cnt, &quot;次迭代&quot;)\n\n\n看着这六十行代码，再看看原版的一百多行，成就感还是有的\n练习了turtlr、OOP、列表推导式、三元运算符、解包裹等操作，虽然作业本身简单，但是学到的东西还是挺多的，针不戳！\n\n","tags":["Python","元胞自动机","turtle","面向对象"]},{"title":"我的2020网易云年度听歌报告","url":"/2020/12/28/0011/","content":"\n今年的报告还挺花的\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["网易云音乐","年度报告","2020"]},{"title":"MathJax Test","url":"/2020/09/12/mathjax%20test/","content":"\n","categories":["MathJax"],"tags":["MathJax"]},{"title":"Hello World","url":"/2021/04/28/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"}]